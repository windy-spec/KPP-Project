import axios, { type AxiosInstance } from "axios";
import { toast } from "react-hot-toast";

type LogoutAction = () => Promise<void>;
let globalLogoutAction: LogoutAction | null = null;
let logoutReady = false;
let appInitTime = Date.now(); // Th·ªùi ƒëi·ªÉm ·ª©ng d·ª•ng kh·ªüi t·∫°o
let isHandling401 = false; // üö® BI·∫æN C·ªú M·ªöI: Ch·∫∑n x·ª≠ l√Ω 401 ƒëa lu·ªìng

export const setGlobalLogoutAction = (action: LogoutAction) => {
  globalLogoutAction = action;
  logoutReady = true;
};

const apiClient: AxiosInstance = axios.create({
  baseURL: "http://localhost:5001/api",
  timeout: 10000,
  headers: { "Content-Type": "application/json" },
});

const handleLogout = async () => {
  if (globalLogoutAction && logoutReady) {
    console.log(" Logout an to√†n ƒë∆∞·ª£c g·ªçi qua Interceptor.");
    // üö® RESET C·ªú SAU KHI LOGOUT TH√ÄNH C√îNG
    isHandling401 = false;
    await globalLogoutAction();
  } else {
    console.warn(" Interceptor ch∆∞a s·∫µn s√†ng, b·ªè qua logout l·∫ßn n√†y.");
    isHandling401 = false;
  }
};

apiClient.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem("accessToken"); // S·ª¨A L·ªñI LOG C·∫¢NH B√ÅO
    const now = Date.now();
    const isInitialLoad = now - appInitTime < 1000; // Gi·∫£ ƒë·ªãnh 1s l√† th·ªùi gian t·∫£i ban ƒë·∫ßu
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
      if (!isInitialLoad) {
        console.log(" G·ª≠i request v·ªõi token:", token.slice(0, 30) + "...");
      }
    } else {
      if (!isInitialLoad) {
        console.warn(" Kh√¥ng c√≥ token trong localStorage khi g·ª≠i request.");
      }
    }
    return config;
  },
  (error) => Promise.reject(error)
);

apiClient.interceptors.response.use(
  (response) => response,
  async (error) => {
    if (axios.isAxiosError(error) && error.response) {
      const status = error.response.status;
      if (status === 401) {
        const token = localStorage.getItem("accessToken");

        if (token) {
          // üö® KI·ªÇM TRA BI·∫æN C·ªú
          if (isHandling401) {
            console.warn(" 401 ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω, b·ªè qua request n√†y.");
            return Promise.reject(error);
          }
          isHandling401 = true; // K√≠ch ho·∫°t c·ªù

          const now = Date.now();
          const appAge = now - appInitTime; // Logic t·∫°m ho√£n khi app m·ªõi load (d∆∞·ªõi 2s)
          if (appAge < 2000) {
            console.log(" App m·ªõi load, t·∫°m ho√£n x·ª≠ l√Ω 401 trong 2s..."); // T·∫°m th·ªùi t·∫Øt c·ªù ƒë·ªÉ cho ph√©p x·ª≠ l√Ω l·∫°i sau khi h·∫øt th·ªùi gian ch·ªù
            // Tuy nhi√™n, ƒë·ªÉ tr√°nh race condition, ta v·∫´n gi·ªØ c·ªù v√† cho setTimeout x·ª≠ l√Ω
            setTimeout(() => handleLogout(), 1500);
            return Promise.reject(error);
          }

          console.error("401: Token t·ªìn t·∫°i nh∆∞ng b·ªã t·ª´ ch·ªëi.");
          return handleLogout();
        } else {
          console.warn(" 401 kh√¥ng c√≥ token, c√≥ th·ªÉ ƒëƒÉng nh·∫≠p sai.");
        }
        return Promise.reject(error);
      }
      // Tr∆∞·ªùng h·ª£p 403 Forbidden c≈©ng c√≥ th·ªÉ c·∫ßn x·ª≠ l√Ω nh∆∞ 401 t√πy logic backend
      if (status === 403 && token) {
        console.error("403: Quy·ªÅn truy c·∫≠p b·ªã t·ª´ ch·ªëi.");
      }

      console.error(`L·ªñI HTTP KH√ÅC: ${status}.`);
      return Promise.reject(error);
    } else if (axios.isAxiosError(error) && error.code === "ERR_NETWORK") {
      console.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß.");
      toast.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra m·∫°ng.");
    }

    return Promise.reject(error);
  }
);

export default apiClient;
